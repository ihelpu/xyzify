#!/usr/bin/env runhaskell
{-# LANGUAGE OverloadedStrings #-}

module Web where

import Prelude hiding (span)

import Control.Error (runEitherT, scriptIO, tryRight)
import Data.ByteString.Lazy.Char8 (hGetContents)
import MFlow.Wai.Blaze.Html.All hiding (id)
import System.IO (IOMode(ReadMode), openFile)

import GCode (makeXYZ)
import Main (fixName)


main :: IO ()
main = runNavigation "" . step . page $ do
    file <- fileUpload <** submitButton "Convert"
    process file

-- process :: (FilePath, String, FilePath) -> View Html IO ()
process (name, _, input) = do
  res <- runEitherT $ do
    dIn <- scriptIO $ openFile input ReadMode >>= hGetContents
    res <- tryRight $ makeXYZ dIn
    let out = fixName name
    return $ out
  either (\x -> p $ "Conversion failed: " >> b << x)
         (\x -> p $ "Downloaded " >> code << x) res ++> wlink () ""


{-

getHomeR :: Handler Html
getHomeR = do
    (formWidget, formEncType) <- generateFormPost uploadForm
    defaultLayout $ do
        setTitle "XYZifier"
        err <- getMessage
        toWidget [whamlet|
<h1>XYZifier
<form method=post action=@{HomeR} enctype=#{formEncType}>
  $maybe msg <- err
    <p>Upload failed: <b>#{msg}</b>
  Need <a href=@{HelpR}>help?</a>
  <p>
  ^{formWidget}
  <input type="submit" value="Convert">
|]

postHomeR :: Handler Html
postHomeR = do
    ((result, _), _) <- runFormPost uploadForm
    case result of
      FormSuccess fi -> do
        output <- fmap makeXYZ . runResourceT $ fileSource fi $$ sinkLbs
        case output of
            Left msg -> setMessage $ toHtml msg
            Right bytes -> do
                               addHeader "Content-Disposition" $ concat
                                   [ "attachment; filename=\"", trunc (fileName fi), ".3w\""]
                               sendResponse (encodeUtf8 (fileContentType fi), toContent bytes)
      _ -> return ()
    redirect HomeR

trunc :: Text -> Text
trunc up = fromMaybe up (stripSuffix ".gcode" up)

uploadForm = renderDivs $ fileAFormReq "File: "

getHelpR :: Handler Html
getHelpR = defaultLayout $ do
               setTitle "XYZifier help"
               toWidget [whamlet|
<h1>XYZifier help

<p><a href=@{HomeR}>Home</a>

This is a tool for converting gcode files generated by slic3r (the open source
object slicing tool) for use by XYZ Printings XYZware tool. The gcode file must
come from a properly configured version of slic3r. Should the gcode file not have
the proper markers in it, you'll get back an error message about it.

<h2>Use
Click <i>Choose File</i> to select the gcode file to convert. Then click <i>Convert</i>
to upload and convert the file. The results will be downloaded with the extension
<code>.3w</code> added to the file name. If the name ended with <code>.gcode</code>,
then that will be removed, so the converted <code>myslic3r.gcode</code>
will be downloaded as <code>myslic3r.3w</code>.

<h2>Slic3r configuration

XYZware reads the comments in a gcode file, looking for specific information. If it fails
to find that, it won't load the file or printing may fail. So we configure slic3r
to provide that information.

Since this information is in the comments, we use the slic3r <i>Start G-code</i>
setting. In my version of slic3r, this is in the logical place: <i>Printer Settings</i>
under <i>Custom G-code</i>.

Add the following to the <b>start</b> of that section:

<pre>
  <code>
    ; --- MOVE THIS SECTION TO THE TOP AND DELETE THIS LINE ---
    ; filename = composition.3w
    ; machine = daVinciF10
    ; material = abs
    ; layer_height = [layer_height]
    ; total_layers = 173
    ; total_filament = 0.00
    ; extruder = 1
    ; --- END SECTION ---

The XYZify program finds the initial comment (<code>--- MOVE THIS ...</code>), removing
any comments and blank lines it finds along the way. The comments - and any actual
g-code - between that line and the last one (<code>--- END SECTION...</code>) are
output, the lines preceeding this section that haven't been removed are output, then
the rest of the file is output unchanged.
<p><a href=@{HomeR}>Home</a>
|]
-}
